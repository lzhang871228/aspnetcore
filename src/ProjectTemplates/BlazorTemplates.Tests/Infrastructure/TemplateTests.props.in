<Project>
  <PropertyGroup>
    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
    <RestoreAdditionalProjectSources>${RestoreAdditionalProjectSources}</RestoreAdditionalProjectSources>

    <!-- This sets an option which prevents the tests from rolling forward into a newer shared framework. -->
    <UserRuntimeConfig>$(MSBuildThisFileDirectory)runtimeconfig.norollforward.json</UserRuntimeConfig>
    <!-- Workaround while there is no 6.0 SDK available, suppress unsupported version error -->
    <NETCoreAppMaximumVersion>6.0</NETCoreAppMaximumVersion>
  </PropertyGroup>

  <ItemGroup>
    <KnownFrameworkReference
      Update="Microsoft.NETCore.App"
      DefaultRuntimeFrameworkVersion="${MicrosoftNETCoreAppRuntimeVersion}"
      LatestRuntimeFrameworkVersion="${MicrosoftNETCoreAppRuntimeVersion}"
      TargetingPackVersion="${MicrosoftNETCoreAppRefVersion}" />

    <KnownFrameworkReference
      Update="Microsoft.AspNetCore.App"
      DefaultRuntimeFrameworkVersion="${MicrosoftAspNetCoreAppRuntimeVersion}"
      LatestRuntimeFrameworkVersion="${MicrosoftAspNetCoreAppRuntimeVersion}"
      TargetingPackVersion="${MicrosoftAspNetCoreAppRefVersion}"
      RuntimePackRuntimeIdentifiers="${SupportedRuntimeIdentifiers}" />
  </ItemGroup>

  <ItemGroup>
    <!-- Workaround when there is no vNext SDK available, copy known apphost/framework reference info from 5.0 -->
    <KnownAppHostPack
      Include="@(KnownAppHostPack->WithMetadataValue('TargetFramework', 'netcoreapp5.0'))"
      TargetFramework="${KnownAppHostPackOrFrameworkReferenceTfm}"
      Condition="@(KnownAppHostPack->Count()) != '0' AND !(@(KnownAppHostPack->AnyHaveMetadataValue('TargetFramework', '${KnownAppHostPackOrFrameworkReferenceTfm}')))"
      />
    <KnownFrameworkReference
      Include="@(KnownFrameworkReference->WithMetadataValue('TargetFramework', 'netcoreapp5.0'))"
      TargetFramework="${KnownAppHostPackOrFrameworkReferenceTfm}"
      Condition="@(KnownFrameworkReference->Count()) != '0' AND !(@(KnownFrameworkReference->AnyHaveMetadataValue('TargetFramework', '${KnownAppHostPackOrFrameworkReferenceTfm}')))"
      />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.Net.Compilers.Toolset"
      Version="${MicrosoftNetCompilersToolsetVersion}"
      PrivateAssets="all"
      IsImplicitlyDefined="true" />
  </ItemGroup>

  <!--
    Use the Razor SDK as a project reference. The version of the .NET Core SDK we build with often contains a version of the Razor SDK
    several versions older than latest. To avoid a cyclical dependency, this package reference is added to override the bundled version.
    Since this is a project reference, we must explicitly import the props file and also specify the output location of the SDK directory.
  -->
  <PropertyGroup>
    <RazorSdkDirectoryRoot>${ArtifactsBinDir}Microsoft.NET.Sdk.Razor\${Configuration}\sdk-output\</RazorSdkDirectoryRoot>
    <BlazorWebAssemblySdkDirectoryRoot>${ArtifactsBinDir}Microsoft.NET.Sdk.BlazorWebAssembly\${Configuration}\sdk-output\</BlazorWebAssemblySdkDirectoryRoot>
  </PropertyGroup>
  <Import Project="${RepoRoot}src\Razor\Microsoft.NET.Sdk.Razor\src\build\netstandard2.0\Microsoft.NET.Sdk.Razor.props" Condition="'$(UsingMicrosoftNETSdkWeb)' == 'true' OR '$(RazorSdkCurrentVersionProps)' != ''" />
</Project>
